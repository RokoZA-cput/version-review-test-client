/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.heinvdende.versionreview.test.client.ui.components;

import com.heinvdende.versionreview.test.client.ui.UICodeView;
import com.heinvdende.versionreview.test.modules.repository.domain.ClassMember;
import com.heinvdende.versionreview.test.modules.repository.domain.FileChange;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author Heinrich
 */
public class TransparentLinePanel extends javax.swing.JPanel {

    public static final Color ADD_COLOUR = new Color(41, 156, 64, 80);
    public static final Color MOD_COLOUR = new Color(196, 222, 31, 80);
    public static final Color DEFAULT_COLOUR = new Color(0,0,0,0);
    public static final Color HIGHLIGHT_COLOUR = new Color(143,152,191,80);
    public static final Color PRESSED_COLOUR = new Color(66,83,149,80);
    public static final Color SELECTED_COLOUR = new Color(195,111,111,80);
    
    private static final int ROW_HEIGHT = 15;
    
    private boolean isSelectable = false;
    private boolean isSelected = false;
    
    private Color color = DEFAULT_COLOUR;
    private Color tmpColor = null;
    // Changes that this line is part of
    private List<FileChange> changes = new ArrayList<>();
    private ClassMember member;
    
    /**
     * Creates new form TransaprentLinePanel
     */
    public TransparentLinePanel() {
        initComponents();
        setBackground(DEFAULT_COLOUR);
        color = DEFAULT_COLOUR;
    }
    
    public TransparentLinePanel(Color color) {
        initComponents();
        setBackground(color);
        this.color = color;
    }

    public void addColor(Color color) {
        setBackground(color);
        this.color = color;
    }
    
    public void addFileChange(FileChange change) {
        changes.add(change);
    }
    
    public void makeSelectable(boolean isSelectable) {
        if(changes.size() > 0)
            this.isSelectable = isSelectable;
    }

    public void selectLine() {
        if(!isSelected) {
            setBackground(SELECTED_COLOUR);
            isSelected = true;
            getParent().getParent().repaint();
            
            if(member != null) {
                LinesPanel parent = (LinesPanel) getParent();
                parent.selectAllLines(member);
            }
        }   
    }
    
    public void unselectLine() {
        if(isSelected) {
            setBackground(color);
            isSelected = false;
            getParent().getParent().repaint();
            
            if(member != null) {
                LinesPanel parent = (LinesPanel) getParent();
                parent.unselectAllLines(member);
            }
        }
    }
    
    public void setMember(ClassMember member) {
        this.member = member;
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        if(getWidth() != getParent().getWidth())
            setSize(getParent().getWidth(), ROW_HEIGHT);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(400, 15));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        UICodeView frame = (UICodeView) SwingUtilities.getWindowAncestor(this);
        for(FileChange change : changes)
            frame.print(change.getUser().getUsername() + " " + change.getType() + " this " + change.getClassMember().getType() +".");
        if(changes.size() > 0)
            frame.print("");
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        setBackground(PRESSED_COLOUR);
        getParent().getParent().repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        
        if(isSelectable) {
            if(!isSelected)
                selectLine();
            else
                unselectLine();
            
            return;
        }
        
        if(tmpColor != null)
            setBackground(tmpColor);
        else
            setBackground(color);
        
        getParent().getParent().repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        setBackground(HIGHLIGHT_COLOUR);
        tmpColor = HIGHLIGHT_COLOUR;
        getParent().getParent().repaint();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        if(isSelected) {
            setBackground(SELECTED_COLOUR);
        }
        else {
            setBackground(color);
            tmpColor = null; 
        }
        getParent().getParent().repaint();
    }//GEN-LAST:event_formMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}

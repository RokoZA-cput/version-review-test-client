/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.heinvdende.versionreview.test.client.ui.components;

import com.heinvdende.versionreview.test.modules.repository.domain.ChangedCodeFile;
import com.heinvdende.versionreview.test.modules.repository.domain.ClassMember;
import com.heinvdende.versionreview.test.modules.repository.domain.FileChange;
import java.awt.Color;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Heinrich
 */
public class LinesPanel extends JPanel {

    private Map<Integer, TransparentLinePanel> lineItems = new HashMap<>();
    
    /**
     * Creates new form LinesPanel
     */
    public LinesPanel() {
        initComponents();
    }

    public void addLines(int linesAmount, ChangedCodeFile file) {
        this.setLayout(new GridLayout(linesAmount, 1));
        for(int i=0;i<linesAmount;i++) {
            TransparentLinePanel lineItem = new TransparentLinePanel();
            lineItems.put(i, lineItem);
            this.add(lineItem);
        }
        
        try {
            highlightAllLines(file.getChanges());
        }
        catch(BadLocationException e) {
            e.printStackTrace();
        }
        
        this.setOpaque(false);
        revalidate();
        repaint();
    }
    
    private List<Integer> addedLines;
    private void highlightAllLines(List<FileChange> changeList) throws BadLocationException {
        addedLines = new ArrayList<>();
        for(FileChange c : changeList) {
            if(c.getMarkerType() == FileChange.MARKER_HIGHLIGHT) {
                for(int i=c.getClassMember().getStartLine();i<=c.getClassMember().getEndLine();i++) {
                    if(c.getType().equals(FileChange.TYPE_ADD)) {
                        if(!addedLines.contains(i))
                            highlightLine(i, TransparentLinePanel.ADD_COLOUR, c);
                    }
                    else if(c.getType().equals(FileChange.TYPE_MOD))
                        highlightLine(i, TransparentLinePanel.MOD_COLOUR, c);
                }
            }
        }
    }
    
    private void highlightLine(int line, Color color, FileChange change) throws BadLocationException {
        lineItems.get(line-1).addColor(color);
        lineItems.get(line-1).addFileChange(change);
        addedLines.add(line);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

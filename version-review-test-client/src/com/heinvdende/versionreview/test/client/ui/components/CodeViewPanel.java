/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.heinvdende.versionreview.test.client.ui.components;

import com.heinvdende.versionreview.test.modules.repository.domain.ChangedCodeFile;
import com.heinvdende.versionreview.test.modules.repository.domain.ClassMember;
import com.heinvdende.versionreview.test.modules.repository.domain.FileChange;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import syntaxhighlight.SyntaxHighlighter;

/**
 *
 * @author Heinrich
 */
public class CodeViewPanel extends JLayeredPane {

    private ChangedCodeFile codeFile;
    private SyntaxHighlighter codeViewPane;
    private boolean isSelectable = false;
    /**
     * Creates new form CodeViewPanel
     */

    public CodeViewPanel(ChangedCodeFile codeFile) {
        this.codeFile = codeFile;
        initComponents();
        createSyntaxHighlighter();
        createLinePanel();

        linesScrollPane.getVerticalScrollBar().setUnitIncrement(20);
        codeViewPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        codeViewPane.getVerticalScrollBar().setModel(linesScrollPane.getVerticalScrollBar().getModel());
        
        linesScrollPane.getViewport().setOpaque(false);
        this.setLayer(linesScrollPane, JLayeredPane.PALETTE_LAYER);
        this.setLayer(codeViewPane, JLayeredPane.DEFAULT_LAYER);
    }

    private void createLinePanel() {
        int lineCount = getLineCount();
        
        linesPanel.addLines(lineCount, codeFile);
    }
    
    private void createSyntaxHighlighter() {
        try {
            codeViewPane = CustomComponents.getFileTab(codeFile);
            GridBagConstraints c = new GridBagConstraints();
            c.gridheight = 1;
            c.gridwidth = 1;
            c.fill = GridBagConstraints.BOTH;
            c.gridx = 0;
            c.gridy = 0;
            c.weightx = 1.0;
            c.weighty = 1.0;
            c.anchor = GridBagConstraints.NORTHWEST;
            add(codeViewPane, c);
        } catch (Exception ex) {
            Logger.getLogger(CodeViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public ChangedCodeFile getCodeFile() {
        return codeFile;
    }

    public void setCodeFile(ChangedCodeFile codeFile) {
        this.codeFile = codeFile;
    }
    
    public void makeSelectable(boolean isSelectable) {
        this.isSelectable = isSelectable;
        linesPanel.makeSelectable(isSelectable);
    }
    
    public boolean isSelectable() {
        return isSelectable;
    }
    
    public void selectAllChanges() {
        if(isSelectable) {
            List<FileChange> changes = codeFile.getChanges();
            for(FileChange c : changes) {
                if(c.getMarkerType() == FileChange.MARKER_HIGHLIGHT)
                    linesPanel.selectAllLines(c.getClassMember());
            }
        }
    }
    
    public void unselectAllChanges() {
        if(isSelectable) {
            List<FileChange> changes = codeFile.getChanges();
            for(FileChange c : changes) {
                if(c.getMarkerType() == FileChange.MARKER_HIGHLIGHT)
                    linesPanel.unselectAllLines(c.getClassMember());
            }
        }
    }
    
    private int getLineCount() {
        BufferedReader br;
        int lineNums = 0;
        try {
            File file = new File(codeFile.getFilePath());
            br = new BufferedReader(new FileReader(file));
            lineNums = br.lines().toArray().length;
        }
        catch(FileNotFoundException e) {
            e.printStackTrace();
        }
        
        return lineNums;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        linesScrollPane = new javax.swing.JScrollPane();
        linesPanel = new com.heinvdende.versionreview.test.client.ui.components.LinesPanel();

        setLayout(new java.awt.GridBagLayout());

        linesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        linesScrollPane.setOpaque(false);

        javax.swing.GroupLayout linesPanelLayout = new javax.swing.GroupLayout(linesPanel);
        linesPanel.setLayout(linesPanelLayout);
        linesPanelLayout.setHorizontalGroup(
            linesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 667, Short.MAX_VALUE)
        );
        linesPanelLayout.setVerticalGroup(
            linesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        linesScrollPane.setViewportView(linesPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(linesScrollPane, gridBagConstraints);
        setLayer(linesScrollPane, javax.swing.JLayeredPane.PALETTE_LAYER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.heinvdende.versionreview.test.client.ui.components.LinesPanel linesPanel;
    private javax.swing.JScrollPane linesScrollPane;
    // End of variables declaration//GEN-END:variables

}
